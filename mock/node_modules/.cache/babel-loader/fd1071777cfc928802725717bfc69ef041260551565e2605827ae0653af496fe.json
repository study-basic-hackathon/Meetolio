{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Util } from '../Util.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Pixelate = function (imageData) {\n  var pixelSize = Math.ceil(this.pixelSize()),\n    width = imageData.width,\n    height = imageData.height,\n    x,\n    y,\n    i,\n    red,\n    green,\n    blue,\n    alpha,\n    nBinsX = Math.ceil(width / pixelSize),\n    nBinsY = Math.ceil(height / pixelSize),\n    xBinStart,\n    xBinEnd,\n    yBinStart,\n    yBinEnd,\n    xBin,\n    yBin,\n    pixelsInBin,\n    data = imageData.data;\n  if (pixelSize <= 0) {\n    Util.error('pixelSize value can not be <= 0');\n    return;\n  }\n  for (xBin = 0; xBin < nBinsX; xBin += 1) {\n    for (yBin = 0; yBin < nBinsY; yBin += 1) {\n      red = 0;\n      green = 0;\n      blue = 0;\n      alpha = 0;\n      xBinStart = xBin * pixelSize;\n      xBinEnd = xBinStart + pixelSize;\n      yBinStart = yBin * pixelSize;\n      yBinEnd = yBinStart + pixelSize;\n      pixelsInBin = 0;\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n          i = (width * y + x) * 4;\n          red += data[i + 0];\n          green += data[i + 1];\n          blue += data[i + 2];\n          alpha += data[i + 3];\n          pixelsInBin += 1;\n        }\n      }\n      red = red / pixelsInBin;\n      green = green / pixelsInBin;\n      blue = blue / pixelsInBin;\n      alpha = alpha / pixelsInBin;\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n          i = (width * y + x) * 4;\n          data[i + 0] = red;\n          data[i + 1] = green;\n          data[i + 2] = blue;\n          data[i + 3] = alpha;\n        }\n      }\n    }\n  }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"names":["Factory","Util","Node","getNumberValidator","Pixelate","imageData","pixelSize","Math","ceil","width","height","x","y","i","red","green","blue","alpha","nBinsX","nBinsY","xBinStart","xBinEnd","yBinStart","yBinEnd","xBin","yBin","pixelsInBin","data","error","addGetterSetter","afterSetFilter"],"sources":["/Users/takahiro/Dev/webhack/node_modules/konva/lib/filters/Pixelate.js"],"sourcesContent":["import { Factory } from '../Factory.js';\nimport { Util } from '../Util.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Pixelate = function (imageData) {\n    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;\n    if (pixelSize <= 0) {\n        Util.error('pixelSize value can not be <= 0');\n        return;\n    }\n    for (xBin = 0; xBin < nBinsX; xBin += 1) {\n        for (yBin = 0; yBin < nBinsY; yBin += 1) {\n            red = 0;\n            green = 0;\n            blue = 0;\n            alpha = 0;\n            xBinStart = xBin * pixelSize;\n            xBinEnd = xBinStart + pixelSize;\n            yBinStart = yBin * pixelSize;\n            yBinEnd = yBinStart + pixelSize;\n            pixelsInBin = 0;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    red += data[i + 0];\n                    green += data[i + 1];\n                    blue += data[i + 2];\n                    alpha += data[i + 3];\n                    pixelsInBin += 1;\n                }\n            }\n            red = red / pixelsInBin;\n            green = green / pixelsInBin;\n            blue = blue / pixelsInBin;\n            alpha = alpha / pixelsInBin;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    data[i + 0] = red;\n                    data[i + 1] = green;\n                    data[i + 2] = blue;\n                    data[i + 3] = alpha;\n                }\n            }\n        }\n    }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}