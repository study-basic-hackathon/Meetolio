{"ast":null,"code":"import _objectSpread from\"/Users/takahiro/Dev/webhack/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,isAuthenticated:false,isLoading:false,error:null};const authReducer=(state,action)=>{switch(action.type){case\"LOGIN_START\":return _objectSpread(_objectSpread({},state),{},{isLoading:true,error:null});case\"LOGIN_SUCCESS\":return _objectSpread(_objectSpread({},state),{},{user:action.payload,isAuthenticated:true,isLoading:false,error:null});case\"LOGIN_FAILURE\":return _objectSpread(_objectSpread({},state),{},{user:null,isAuthenticated:false,isLoading:false,error:action.payload});case\"LOGOUT\":return _objectSpread(_objectSpread({},state),{},{user:null,isAuthenticated:false,isLoading:false,error:null});case\"REGISTER_START\":return _objectSpread(_objectSpread({},state),{},{isLoading:true,error:null});case\"REGISTER_SUCCESS\":return _objectSpread(_objectSpread({},state),{},{user:action.payload,isAuthenticated:true,isLoading:false,error:null});case\"REGISTER_FAILURE\":return _objectSpread(_objectSpread({},state),{},{user:null,isAuthenticated:false,isLoading:false,error:action.payload});case\"CLEAR_ERROR\":return _objectSpread(_objectSpread({},state),{},{error:null});default:return state;}};const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);const login=async formData=>{dispatch({type:\"LOGIN_START\"});try{// モック実装：実際のAPI呼び出しに置き換える\nawait new Promise(resolve=>setTimeout(resolve,1000));// ダミーユーザーデータ\nconst mockUser={id:\"1\",email:formData.email,name:\"テストユーザー\",company:\"テスト株式会社\",jobTitle:\"エンジニア\",createdAt:new Date(),updatedAt:new Date(),isDeleted:false};dispatch({type:\"LOGIN_SUCCESS\",payload:mockUser});}catch(error){dispatch({type:\"LOGIN_FAILURE\",payload:\"ログインに失敗しました\"});}};const register=async formData=>{dispatch({type:\"REGISTER_START\"});try{// モック実装：実際のAPI呼び出しに置き換える\nawait new Promise(resolve=>setTimeout(resolve,1000));// ダミーユーザーデータ\nconst mockUser={id:\"1\",email:formData.email,name:formData.name,company:formData.company,jobTitle:formData.jobTitle,createdAt:new Date(),updatedAt:new Date(),isDeleted:false};dispatch({type:\"REGISTER_SUCCESS\",payload:mockUser});}catch(error){dispatch({type:\"REGISTER_FAILURE\",payload:\"登録に失敗しました\"});}};const logout=()=>{dispatch({type:\"LOGOUT\"});};const clearError=()=>{dispatch({type:\"CLEAR_ERROR\"});};const value=_objectSpread(_objectSpread({},state),{},{login,register,logout,clearError});return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsx","_jsx","initialState","user","isAuthenticated","isLoading","error","authReducer","state","action","type","_objectSpread","payload","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","dispatch","login","formData","Promise","resolve","setTimeout","mockUser","id","email","name","company","jobTitle","createdAt","Date","updatedAt","isDeleted","register","logout","clearError","value","Provider"],"sources":["/Users/takahiro/Dev/webhack/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode } from \"react\";\nimport { AuthState, User, LoginForm, RegisterForm } from \"../types\";\n\ntype AuthAction =\n  | { type: \"LOGIN_START\" }\n  | { type: \"LOGIN_SUCCESS\"; payload: User }\n  | { type: \"LOGIN_FAILURE\"; payload: string }\n  | { type: \"LOGOUT\" }\n  | { type: \"REGISTER_START\" }\n  | { type: \"REGISTER_SUCCESS\"; payload: User }\n  | { type: \"REGISTER_FAILURE\"; payload: string }\n  | { type: \"CLEAR_ERROR\" };\n\nconst initialState: AuthState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n};\n\nconst authReducer = (state: AuthState, action: AuthAction): AuthState => {\n  switch (action.type) {\n    case \"LOGIN_START\":\n      return {\n        ...state,\n        isLoading: true,\n        error: null,\n      };\n    case \"LOGIN_SUCCESS\":\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      };\n    case \"LOGIN_FAILURE\":\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      };\n    case \"REGISTER_START\":\n      return {\n        ...state,\n        isLoading: true,\n        error: null,\n      };\n    case \"REGISTER_SUCCESS\":\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      };\n    case \"REGISTER_FAILURE\":\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload,\n      };\n    case \"CLEAR_ERROR\":\n      return {\n        ...state,\n        error: null,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface AuthContextType extends AuthState {\n  login: (formData: LoginForm) => Promise<void>;\n  register: (formData: RegisterForm) => Promise<void>;\n  logout: () => void;\n  clearError: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  const login = async (formData: LoginForm) => {\n    dispatch({ type: \"LOGIN_START\" });\n\n    try {\n      // モック実装：実際のAPI呼び出しに置き換える\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // ダミーユーザーデータ\n      const mockUser: User = {\n        id: \"1\",\n        email: formData.email,\n        name: \"テストユーザー\",\n        company: \"テスト株式会社\",\n        jobTitle: \"エンジニア\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDeleted: false,\n      };\n\n      dispatch({ type: \"LOGIN_SUCCESS\", payload: mockUser });\n    } catch (error) {\n      dispatch({ type: \"LOGIN_FAILURE\", payload: \"ログインに失敗しました\" });\n    }\n  };\n\n  const register = async (formData: RegisterForm) => {\n    dispatch({ type: \"REGISTER_START\" });\n\n    try {\n      // モック実装：実際のAPI呼び出しに置き換える\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // ダミーユーザーデータ\n      const mockUser: User = {\n        id: \"1\",\n        email: formData.email,\n        name: formData.name,\n        company: formData.company,\n        jobTitle: formData.jobTitle,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isDeleted: false,\n      };\n\n      dispatch({ type: \"REGISTER_SUCCESS\", payload: mockUser });\n    } catch (error) {\n      dispatch({ type: \"REGISTER_FAILURE\", payload: \"登録に失敗しました\" });\n    }\n  };\n\n  const logout = () => {\n    dispatch({ type: \"LOGOUT\" });\n  };\n\n  const clearError = () => {\n    dispatch({ type: \"CLEAR_ERROR\" });\n  };\n\n  const value: AuthContextType = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}