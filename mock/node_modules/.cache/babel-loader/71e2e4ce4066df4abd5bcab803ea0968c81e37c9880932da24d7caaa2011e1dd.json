{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n  _sceneFunc(context) {\n    const points = this._getPoints();\n    context.beginPath();\n    context.moveTo(points[0].x, points[0].y);\n    for (var n = 1; n < points.length; n++) {\n      context.lineTo(points[n].x, points[n].y);\n    }\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  _getPoints() {\n    const sides = this.attrs.sides;\n    const radius = this.attrs.radius || 0;\n    const points = [];\n    for (var n = 0; n < sides; n++) {\n      points.push({\n        x: radius * Math.sin(n * 2 * Math.PI / sides),\n        y: -1 * radius * Math.cos(n * 2 * Math.PI / sides)\n      });\n    }\n    return points;\n  }\n  getSelfRect() {\n    const points = this._getPoints();\n    var minX = points[0].x;\n    var maxX = points[0].y;\n    var minY = points[0].x;\n    var maxY = points[0].y;\n    points.forEach(point => {\n      minX = Math.min(minX, point.x);\n      maxX = Math.max(maxX, point.x);\n      minY = Math.min(minY, point.y);\n      maxY = Math.max(maxY, point.y);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n  getWidth() {\n    return this.radius() * 2;\n  }\n  getHeight() {\n    return this.radius() * 2;\n  }\n  setWidth(width) {\n    this.radius(width / 2);\n  }\n  setHeight(height) {\n    this.radius(height / 2);\n  }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());","map":{"version":3,"names":["Factory","Shape","getNumberValidator","_registerNode","RegularPolygon","_sceneFunc","context","points","_getPoints","beginPath","moveTo","x","y","n","length","lineTo","closePath","fillStrokeShape","sides","attrs","radius","push","Math","sin","PI","cos","getSelfRect","minX","maxX","minY","maxY","forEach","point","min","max","width","height","getWidth","getHeight","setWidth","setHeight","prototype","className","_centroid","_attrsAffectingSize","addGetterSetter"],"sources":["/Users/takahiro/Dev/webhack/node_modules/konva/lib/shapes/RegularPolygon.js"],"sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n    _sceneFunc(context) {\n        const points = this._getPoints();\n        context.beginPath();\n        context.moveTo(points[0].x, points[0].y);\n        for (var n = 1; n < points.length; n++) {\n            context.lineTo(points[n].x, points[n].y);\n        }\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    _getPoints() {\n        const sides = this.attrs.sides;\n        const radius = this.attrs.radius || 0;\n        const points = [];\n        for (var n = 0; n < sides; n++) {\n            points.push({\n                x: radius * Math.sin((n * 2 * Math.PI) / sides),\n                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),\n            });\n        }\n        return points;\n    }\n    getSelfRect() {\n        const points = this._getPoints();\n        var minX = points[0].x;\n        var maxX = points[0].y;\n        var minY = points[0].x;\n        var maxY = points[0].y;\n        points.forEach((point) => {\n            minX = Math.min(minX, point.x);\n            maxX = Math.max(maxX, point.x);\n            minY = Math.min(minY, point.y);\n            maxY = Math.max(maxY, point.y);\n        });\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n    getWidth() {\n        return this.radius() * 2;\n    }\n    getHeight() {\n        return this.radius() * 2;\n    }\n    setWidth(width) {\n        this.radius(width / 2);\n    }\n    setHeight(height) {\n        this.radius(height / 2);\n    }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}